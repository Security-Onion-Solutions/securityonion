{% from 'vars/globals.map.jinja' import GLOBALS %}
{% from 'docker/docker.map.jinja' import DOCKER %}
{% import_yaml 'firewall/defaults.yaml' as FIREWALL_DEFAULT %}
{% if GLOBALS.pipeline == 'KAFKA' %}
{%   set KAFKA_LOGSTASH = salt['pillar.get']('kafka:logstash', []) %}
{%   set KAFKA_CONTROLLERS = salt['pillar.get']('kafka:controllers', []) %}
{%   set KAFKA_ELIGIBLE = ['manager', 'managersearch', 'standalone', 'receiver', 'fleet'] %}
{% endif %}

{# add our ip to self #}
{% do FIREWALL_DEFAULT.firewall.hostgroups.self.append(GLOBALS.node_ip) %}
{# add dockernet range #}
{% do FIREWALL_DEFAULT.firewall.hostgroups.dockernet.append(DOCKER.range) %}

{% if GLOBALS.role == 'so-idh' %}
{%   from 'idh/opencanary_config.map.jinja' import IDH_PORTGROUPS %}
{%   do salt['defaults.merge'](FIREWALL_DEFAULT.firewall.portgroups, IDH_PORTGROUPS, in_place=True) %}
{%   for pg in IDH_PORTGROUPS.keys() %}
{#     idh service ports start with _idh. this prevents adding openssh to allow from anywhere #}
{%     if pg.split('_')[0] == 'idh' %}
{%       do FIREWALL_DEFAULT.firewall.role.idh.chain.INPUT.hostgroups.anywhere.portgroups.append(pg) %}
{%     endif %}
{%   endfor %}
{% endif %}

{# Only add Kafka firewall items when Kafka enabled #}
{% if GLOBALS.pipeline == 'KAFKA' %}
{%   set role = GLOBALS.role.split('-')[1] %}
{%   if GLOBALS.hostname in KAFKA_CONTROLLERS %}
{%     for r in ['manager', 'managersearch', 'standalone', 'receiver', 'fleet'] %}
{%       if r in FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups %}
{%         do FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups[r].portgroups.append('kafka_controller') %}
{%       endif %}
{%     endfor %}
{%   endif %}
{%   if role in KAFKA_ELIGIBLE %}
{%     for r in ['manager', 'managersearch', 'standalone', 'receiver', 'fleet', 'idh', 'sensor', 'searchnode','heavynode', 'elastic_agent_endpoint', 'desktop', 'self'] %}
{%       if FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups[r] is defined %}
{%         do FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups[r].portgroups.append('kafka_data') %}
{#         Remove redis ports #}
{%         if 'redis' in FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups[r].portgroups %}
{%           do FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups[r].portgroups.remove('redis') %}
{%         endif %}
{#         Check if logstash was manually enabled for this node before removing logstash port #}
{%         if GLOBALS.hostname not in KAFKA_LOGSTASH %}
{%           if 'elastic_agent_data' in FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups[r].portgroups %}
{%             do FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups[r].portgroups.remove('elastic_agent_data') %}
{%           endif %}
{%         endif %}
{%       endif %}
{%     endfor %}
{#     Remove external_kafka_data portgroup from any kafka node that isn't a broker #}
{%     if GLOBALS.hostname in KAFKA_CONTROLLERS %}
{%       do FIREWALL_DEFAULT.firewall.role[role].chain["DOCKER-USER"].hostgroups.pop('external_kafka_data') %}
{%     endif %}
{%   endif %}
{% endif %}

{% set FIREWALL_MERGED = salt['pillar.get']('firewall', FIREWALL_DEFAULT.firewall, merge=True) %}
